#include <iostream>
#include <conio.h>
#include <windows.h>

using namespace std;

bool gameOver;
const int width = 20;
const int height = 20;
int x, y, fruitX, fruitY, score;
int tailX[100], tailY[100];
int nTail;
enum eDirection { STOP = 0, LEFT, RIGHT, UP, DOWN };
eDirection dir;

void Setup() {
    gameOver = false;
    dir = STOP;
    x = width / 2;
    y = height / 2;
    fruitX = rand() % width;
    fruitY = rand() % height;
    score = 0;
    nTail = 0; // Reset the tail
}

void Draw() {
    system("cls"); // Clear screen

    for (int i = 0; i < width + 2; i++)
        cout << "#";
    cout << endl;

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (j == 0)
                cout << "#"; // Left wall
            if (i == y && j == x)
                cout << "O"; // Snake head
            else if (i == fruitY && j == fruitX)
                cout << "F"; // Fruit
            else {
                bool print = false;
                for (int k = 0; k < nTail; k++) {
                    if (tailX[k] == j && tailY[k] == i) {
                        cout << "o"; // Snake tail
                        print = true;
                    }
                }
                if (!print)
                    cout << " ";
            }

            if (j == width - 1)
                cout << "#"; // Right wall
        }
        cout << endl;
    }

    for (int i = 0; i < width + 2; i++)
        cout << "#";
    cout << endl;

    cout << "Score: " << score << endl;
}

void Input() {
    if (_kbhit()) {
        switch (_getch()) {
        case 'a':
            dir = LEFT;
            break;
        case 'd':
            dir = RIGHT;
            break;
        case 'w':
            dir = UP;
            break;
        case 's':
            dir = DOWN;
            break;
        case 'x':
            gameOver = true;
            break;
        }
    }
}

void Logic() {
    int prevX = tailX[0];
    int prevY = tailY[0];
    int prev2X, prev2Y;
    tailX[0] = x;
    tailY[0] = y;
    for (int i = 1; i < nTail; i++) {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }
    switch (dir) {
    case LEFT:
        x--;
        break;
    case RIGHT:
        x++;
        break;
    case UP:
        y--;
        break;
    case DOWN:
        y++;
        break;
    default:
        break;
    }

    // Check for collision with walls
    if (x >= width || x < 0 || y >= height || y < 0) {
        cout << "You hit a wall! Game Over!" << endl;
        Setup(); // Reset the game when hitting a wall
        return;
    }

    // Check for collision with tail
    for (int i = 0; i < nTail; i++) {
        if (tailX[i] == x && tailY[i] == y) {
            cout << "You ran into yourself! Game Over!" << endl;
            Setup(); // Reset the game when colliding with the tail
            return;
        }
    }

    // Check for fruit collection
    if (x == fruitX && y == fruitY) {
        score += 10;
        fruitX = rand() % width;
        fruitY = rand() % height;
        nTail++;
    }
}

void ShowCredits() {
    system("cls");
    cout << "Snake Game\n";
    cout << "Developed by: Thomas Shillito\n";
    cout << "Language: C++\n";
    cout << "Press any key to return to the main menu...";
    _getch(); // Wait for user input before returning to the menu
}

void StartMenu() {
    int choice;
    while (true) {
        system("cls");
        cout << "==== Snake Game ====\n";
        cout << "1. Play\n";
        cout << "2. Credits\n";
        cout << "3. Exit\n";
        cout << "Select an option: ";
        cin >> choice;

        switch (choice) {
        case 1:
            Setup();
            while (!gameOver) {
                Draw();
                Input();
                Logic();
                Sleep(100); // Slow down the game loop
            }
            break;
        case 2:
            ShowCredits();
            break;
        case 3:
            exit(0);
        default:
            cout << "Invalid option. Please try again.\n";
            Sleep(1000); // Pause for a moment before showing the menu again
        }
    }
}

int main() {
    StartMenu(); // Start the game by showing the main menu
    return 0;
}
